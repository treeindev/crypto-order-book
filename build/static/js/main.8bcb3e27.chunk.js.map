{"version":3,"sources":["models/constants.ts","store/main.ts","components/orderbook.tsx","components/header.tsx","components/bottom.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DEFAULT_CURRENCY","AVAILABLE_CURRENCIES","CURRENCY_GROUPS","appSlice","createSlice","name","initialState","active_currency","active_group","group_list","asks","bids","reducers","activateCurrency","state","action","payload","activateGroup","resetOrderBook","updateOrders","handleOrders","orderBook","orders","i","length","price","size","value","toString","store","configureStore","reducer","actions","OrderBook","useSelector","getItemList","reversed","list","accumulatedTotal","keys","Object","sort","a","b","parseInt","highestTotal","slice","reduce","total","current","percentage","Math","round","push","reverse","className","map","order","index","Header","currency","group","Bottom","dispatcher","useDispatch","swapCurrency","onClick","App","useState","WebSocket","socket","socketCurrency","setSocketCurrency","loadingSocket","setLoading","useEffect","send","setTimeout","onopen","event","onmessage","data","JSON","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8bcb3e27.chunk.js","sourcesContent":["export const DEFAULT_CURRENCY = \"PI_XBTUSD\";\nexport const AVAILABLE_CURRENCIES: {[key: string]: string} = {\n    \"bitcoin\": \"PI_XBTUSD\",\n    \"ether\": \"PI_ETHUSD\",\n}\nexport const CURRENCY_GROUPS: {[key: string]: number[]} = {\n    \"PI_XBTUSD\": [\n        0.5,\n        1,\n        2.5\n    ],\n    \"PI_ETHUSD\": [\n        0.05,\n        0.1,\n        0.25\n    ]\n};","import { configureStore, createSlice } from '@reduxjs/toolkit';\nimport {  } from '@reduxjs/toolkit'\nimport { CURRENCY_GROUPS, DEFAULT_CURRENCY } from '../models/constants';\nimport { ActionGroupActivate, ActionCurrencyActivate, ActionUpdateOrders } from '../models/actions';\nimport { AppState, OrderData } from '../models/state';\n\n// Slice that will handle updates to the app state.\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    active_currency: DEFAULT_CURRENCY,\n    active_group: CURRENCY_GROUPS[DEFAULT_CURRENCY][0],\n    group_list: CURRENCY_GROUPS[DEFAULT_CURRENCY],\n    asks: {},\n    bids: {}\n  } as AppState,\n  reducers: {\n    activateCurrency: (state: AppState, action: ActionCurrencyActivate) => {\n      // Update currency value.\n      state.active_currency = action.payload;\n      // Update the list of available groups for the new currency.\n      state.group_list = CURRENCY_GROUPS[action.payload];\n      // The default grouping will be the first item on the array.\n      state.active_group = CURRENCY_GROUPS[action.payload][0];\n    },\n    activateGroup: (state: AppState, action: ActionGroupActivate) => {\n      state.active_group = action.payload\n    },\n    resetOrderBook: (state: AppState, action: {payload: any; type: string;}) => {\n      state.asks = {};\n      state.bids = {};\n    },\n    updateOrders: (state: AppState, action: ActionUpdateOrders) => {\n      const handleOrders = (orderBook: {[key: string]: OrderData}, orders: Array<any>) => {\n        for(let i=0; i<orders.length; i++) {\n          // Price tick size can be up to 0.05, multiple by 100 to ensure no decimals are processed.\n          const price = orders[i][0];\n          const size = orders[i][1];\n          const value = (price * 100).toString();\n\n          // Remove an order price if the size is set to 0\n          if (size === 0) {\n            delete orderBook[value];\n            continue;\n          }\n\n          // Update state\n          orderBook[value] = {\n            price: orders[i][0],\n            size: size\n          };\n        }\n      }\n      handleOrders(state.bids, action.payload.bids);\n      handleOrders(state.asks, action.payload.asks);\n    }\n  },\n})\n\n// Store object containing a single reducer.\nexport const store = configureStore({\n  reducer: appSlice.reducer\n});\n\n// List of actions that should be used to update the state.\nexport const {\n  activateGroup,\n  activateCurrency,\n  updateOrders,\n  resetOrderBook\n} = appSlice.actions;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { OrderData, OrderElement } from '../models/state';\nimport './orderbook.scss';\n\nfunction OrderBook() {\n    const bids = useSelector((state: any) => state.bids);\n    const asks = useSelector((state: any) => state.asks);\n    const displayLimit = 20;\n  \n    const getItemList = (orders: {[key: string]: OrderData}, reversed: boolean): Array<OrderElement> => {\n      const list: Array<OrderElement> = [];\n      let accumulatedTotal = 0;\n  \n      // Sort order keys in descending order.\n      const keys = Object.keys(orders);\n      keys.sort( (a,b) => parseInt(b)-parseInt(a));\n  \n      // Get the highest total on the current order book.\n      const highestTotal = parseInt(\n        keys.slice(0,displayLimit).reduce((total, current, i) => `${parseInt(total)+orders[current].size}`, '0')\n      );\n      if (keys.length<displayLimit) return list;\n  \n      // Render only up to 10 orders.\n      for (let i=0; i<displayLimit; i++) {\n        const size = orders[keys[i]].size;\n        const price = orders[keys[i]].price;\n  \n        // Total is get after sum of sizes from all higher prices in the current order book.\n        // If there are no higher orders, then total is equal to current order size.\n        const total = accumulatedTotal + size;\n        accumulatedTotal = total;\n  \n        // Get the highest total and calculate the current order percentage.\n        const percentage = Math.round(total / highestTotal * 100);\n  \n        // list.push(<Order reference={i} price={price} size={size} total={total} percent={percentage} reversed={reversed}></Order>);\n        list.push({\n          price: price,\n          size: size,\n          total: total,\n          percentage: percentage\n        });\n      }\n  \n      return reversed ? [...list.reverse()] : list;\n    }\n  \n    return (\n      <div className=\"book_container\">\n        <div className=\"order_section bids\">\n          <ul className=\"header\">\n            <li>TOTAL</li>\n            <li>SIZE</li>\n            <li>PRICE</li>\n          </ul>\n          <ul className=\"order_book\">\n            {getItemList(bids, false).map((order: OrderElement, index: number) => {\n              return <li className={`bg-green-${order.percentage}`} key={index}>\n                <span>{order.total}</span><span>{order.size}</span><span className=\"price\">{order.price}</span>\n              </li>\n            })}\n          </ul>\n        </div>\n        <div className=\"order_section asks\">\n          <ul className=\"header\">\n            <li>PRICE</li>\n            <li>SIZE</li>\n            <li>TOTAL</li>\n          </ul>\n          <ul className=\"order_book\">\n            {getItemList(asks, true).map((order: OrderElement, index: number) => {\n              return <li className={`bg-red-${order.percentage}`} key={index}>\n                <span className=\"price\">{order.price}</span><span>{order.size}</span><span>{order.total}</span>\n              </li>\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n  \n  export default OrderBook;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport \"./header.scss\";\n\nfunction Header() {\n  const currency = useSelector((state: any) => state.active_currency);\n  const group = useSelector((state: any) => state.active_group);\n\n  return(\n    <div className=\"header\">\n      <h1>Order Book: Active Currency: {currency}</h1>\n      <select>\n          <option>{group}</option>\n      </select>\n    </div>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AVAILABLE_CURRENCIES } from '../models/constants';\nimport { activateCurrency } from '../store/main';\nimport './bottom.scss';\n\nfunction Bottom() {\n  const dispatcher = useDispatch();\n  const currency = useSelector((state: any) => state.active_currency);\n\n  const swapCurrency = () => {\n    const newCurrency = currency === AVAILABLE_CURRENCIES.bitcoin ? \n      AVAILABLE_CURRENCIES.ether : AVAILABLE_CURRENCIES.bitcoin;\n    dispatcher(activateCurrency(newCurrency));\n  }\n  return(\n    <div className=\"bottom\">\n      <button className=\"pink\" onClick={()=>{swapCurrency()}}>Toggle Feed</button>\n      <button className=\"red\" onClick={()=>{swapCurrency()}}>Kill Feed</button>\n    </div>\n  )\n}\n\nexport default Bottom;","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { updateOrders, resetOrderBook } from './store/main';\nimport './App.scss';\nimport OrderBook from './components/orderbook';\nimport Header from './components/header';\nimport Bottom from './components/bottom';\n\nfunction App() {\n  const [socket] = useState(new WebSocket('wss://www.cryptofacilities.com/ws/v1'));\n  const [socketCurrency, setSocketCurrency] = useState();\n  const [loadingSocket, setLoading] = useState(false);\n  const currency = useSelector( (state: any) => state.active_currency );\n  const dispatcher = useDispatch();\n\n  useEffect(() => {\n    if (loadingSocket) return;\n    if (socketCurrency && socketCurrency !== currency) {\n      setLoading(true);\n      socket.send(`{\"event\":\"unsubscribe\",\"feed\":\"book_ui_1\",\"product_ids\":[\"${socketCurrency}\"]}`);\n      \n      // Set a manual delay between socket subscriptions.\n      // This allows for cleaning up previous order book state before subscribing again.\n      setTimeout(() => {\n        dispatcher(resetOrderBook(null));\n        socket.send(`{\"event\":\"subscribe\",\"feed\":\"book_ui_1\",\"product_ids\":[\"${currency}\"]}`);\n        setSocketCurrency(currency);\n        setLoading(false);\n      }, 1000);\n    }\n\n    socket.onopen = (event) => {\n      socket.send(`{\"event\":\"subscribe\",\"feed\":\"book_ui_1\",\"product_ids\":[\"${currency}\"]}`);\n      setSocketCurrency(currency);\n    }\n\n    socket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      if (data.bids && data.asks) {\n        dispatcher(updateOrders(data));\n      }\n    }\n  }, [currency, socket, socketCurrency, dispatcher, loadingSocket]);\n\n  return (\n    <div className=\"application\">\n      <Header></Header>\n      <OrderBook></OrderBook>\n      <Bottom></Bottom>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store/main';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}